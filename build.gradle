buildscript {
    repositories {
        mavenLocal()
        maven {
            allowInsecureProtocol true
            url 'https://maven.aliyun.com/repository/central'
        }
        mavenCentral()
    }

    ext {
        set('dependencyManagementVersion', '1.0.6.RELEASE')
    }

    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:${dependencyManagementVersion}"
    }
}

plugins {
    id 'groovy'
    // id "io.spring.dependency-management" version "1.0.6.RELEASE" apply false
}

ext {
    set('springCloudVersion', 'Finchley.SR4')
    set('mybatisSpringBootStarterVersion', '2.1.4')
    set('pageHelperSpringBootStarterVersion', '1.3.0')
    set('druidSpringBootStarterVersion', '1.1.24')
    set('mysqlConnectorJavaVersion', '8.0.25')
    // set('mssqlJdbcVersion', '9.4.0.jre8')
    set('mssqlJdbcVersion', '8.2.2.jre8')
    set('userAgentUtilsVersion', '1.21')
    set('lombokVersion', '1.18.8')
    set('poiVersion', '4.1.2')
    set('deepooveVersion', '1.9.1')
    set('jacksonBomVersion', '2.11.4')
    set('nuonuoVersion', '1.0.5')
    set('guavaVersion', '19.0')
    set('log4jVersion', '2.17.1')
    set('logbackVersion', '1.2.10')
    set('slf4jVersion', '1.7.32')
}

allprojects {
    apply plugin: 'eclipse-wtp'
    apply plugin: 'idea'
    apply plugin: 'java-library'

    repositories {
        mavenLocal()
        maven {
            allowInsecureProtocol true
            url 'https://maven.aliyun.com/repository/central'
        }
        mavenCentral()
    }

    //编译groovy代码时采用 UTF-8
    tasks.withType(GroovyCompile) {
        groovyOptions.encoding = 'MacRoman'
    }

    //编译JAVA文件时采用UTF-8
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}

apply from: 'modules.gradle'
//apply from: 'hr-modules.gradle'

subprojects { subProject ->

    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'io.spring.dependency-management'

    dependencies {
        implementation ('org.springframework.boot:spring-boot-starter-logging') {
            dependencies {
                implementation ("ch.qos.logback:logback-classic:${logbackVersion}") {
                    dependencies {
                        implementation "ch.qos.logback:logback-core:${logbackVersion}"
                        implementation "org.slf4j:slf4j-api:${slf4jVersion}"
                    }
                }
                implementation ("org.apache.logging.log4j:log4j-to-slf4j:${log4jVersion}") {
                    dependencies {
                        implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
                        // implementation "org.slf4j:slf4j-api:${slf4jVersion}"
                    }
                }
            }
        }
        implementation 'com.fasterxml.jackson.core:jackson-databind'
        implementation "com.google.guava:guava:${guavaVersion}"
        if (startupService.any({ oneService -> oneService.endsWith(subProject.name) })) {
            // 启动项目包含必要的spring依赖
            implementation 'org.springframework.boot:spring-boot-starter-aop'
            implementation 'org.springframework.boot:spring-boot-starter'
            implementation 'org.springframework.boot:spring-boot-starter-web'
            implementation 'org.springframework.boot:spring-boot-starter-jdbc'
            //tools
            implementation "org.springframework.boot:spring-boot-devtools:${springBootVersion}"
        } else if (oldMobileEndEntry.any({ oneEntry -> oneEntry.endsWith(subProject.name) })) {
            // 旧版移动端入口项目
            implementation 'org.springframework.boot:spring-boot-starter-web'
        } else if (baseAPIJar.any({ oneBaseAPI -> oneBaseAPI.endsWith(subProject.name) })) {
            // 基础数据，API项目
//            api project(':common')         // 公共模块
            if (!subProject.name.startsWith("util")) {
                // 用到的模块有限，暂时改为需要的模块自行添加依赖
                // compile "cn.pccpa.www:wechat-client-spring-boot-starter:${wechatClientVersion}"
            }
        } else if (!specialModule.any({ oneSpecial -> oneSpecial.endsWith(subProject.name) })) {
            // 所有的service层（只要包含了controller，service，mapper类）必要的数据持久层依赖
            api "com.github.pagehelper:pagehelper-spring-boot-starter:${pageHelperSpringBootStarterVersion}"
            // api "org.mybatis:mybatis:${mybatisVersion}"
            api 'org.mybatis:mybatis-typehandlers-jsr310:1.0.2'
//            api project(':common')         // 公共模块
        }
        if (subProject.name.startsWith("util") || !baseAPIJar.any({ oneBaseAPI -> oneBaseAPI.endsWith(subProject.name) })) {
            implementation 'com.google.code.gson:gson'
        }
        //test
        testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
        // Groovy
        testImplementation 'org.codehaus.groovy:groovy-all:2.4.12'
        testImplementation 'org.spockframework:spock-core:1.1-groovy-2.4-rc-2'
        testImplementation 'org.spockframework:spock-spring:1.1-groovy-2.4-rc-2'
        testImplementation "cglib:cglib-nodep:${cglibVersion}"
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "com.fasterxml.jackson:jackson-bom:${jacksonBomVersion}"
        }
    }
}
